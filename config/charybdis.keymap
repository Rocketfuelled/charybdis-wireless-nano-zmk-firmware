#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 4>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <4>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <5>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <12>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <6>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_MISC>;
        y-input-code = <INPUT_REL_WHEEL>;
        scale-divisor = <6>;
        bindings = <&ib_wheel_scaler 1 8>;
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    behaviors {
        hl: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <5 25 15 33 34 26 16 17 28 18 27 29 19 8 9 7 6>;
        };

        hr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 10 20 22 21 11 2 1 12 13 3 4 14 24 30 23 31 32>;
        };
    };

    macros {
        vs_def: vs_def {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp F12>;
            label = "VS_DEF";
        };

        vs_impl: vs_impl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(F12)>;
            label = "VS_IMPL";
        };

        vs_refs: vs_refs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(K) &kp R>;
            label = "VS_REFS";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03     04        05     06     07     08     09
    // ├──────┼──────┼──────┼──────┼──────┼  ├──────┼──────┼──────┼──────┼──────┤
    //    10     11     12     13     14        15     16     17     18     19
    // ├──────┼──────┼──────┼──────┼──────┼  ├──────┼──────┼──────┼──────┼──────┤
    //    20     21     22     23     24        25     26     27     28     29
    // ╰──────┴──────┴──────┼──────┼──────┤  ├──────┼──────┴──────┴──────┴──────╯
    //                  30     31     32        33     34     35
    //               ╰──────┴──────┴──────╯  ╰──────┴──────┴──────╯

    combos {
        compatible = "zmk,combos";

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <2 7>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 8>;
        };

        combo_bt1 {
            bindings = <&bt BT_SEL 1>;
            key-positions = <23 24>;
        };

        combo_bt2 {
            bindings = <&bt BT_SEL 2>;
            key-positions = <25 26>;
        };

        combo_bt_clear_all {
            bindings = <&bt BT_CLR_ALL>;
            key-positions = <23 24 25 26>;
        };

        combo_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <12 13>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Base {
            bindings = <
  &kp Q       &kp W           &kp E        &kp R        &kp T      &kp Y        &kp U            &kp I         &kp O       &kp P
  &hl LGUI A  &hl LEFT_ALT S  &hl LCTRL D  &hl LSHFT F  &kp G      &kp H        &hr RSHFT J      &hr RCTRL K   &hr RALT L  &hr RGUI SQT
  &lt 5 Z     &kp X           &kp C        &kp V        &kp B      &kp N        &kp M            &kp COMMA     &kp DOT     &lt 5 SLASH
                              &lt 4 ESC    &lt 4 SPACE  &kp TAB    &lt 2 ENTER  &lt 1 BACKSPACE  &lt 3 DELETE
            >;
        };

        Numbers {
            bindings = <
  &none      &kp NUMBER_7       &kp NUMBER_8  &kp NUMBER_9        &none            &none  &kp N7        &kp N8        &kp N9       &none
  &kp COLON  &hl LALT NUMBER_4  &hl LCTRL N5  &hl LSHFT NUMBER_6  &kp EQUAL        &none  &hr RSHFT N4  &hr RCTRL N5  &hr RALT N6  &kp RGUI
  &kp GRAVE  &kp NUMBER_1       &kp NUMBER_2  &kp NUMBER_3        &kp BACKSLASH    &none  &kp N1        &kp N2        &kp N3       &kp N0
                                &kp PERIOD    &kp NUMBER_0        &kp MINUS        &none  &trans        &none
            >;
        };

        Symbols {
            bindings = <
  &none          &kp AMPERSAND    &kp ASTERISK  &kp LEFT_PARENTHESIS  &none       &none  &kp AMPS   &kp STAR   &kp PLUS   &kp TILDE
  &kp SEMICOLON  &kp DOLLAR       &kp PERCENT   &kp CARET             &kp PLUS    &none  &kp DLLR   &kp PRCNT  &kp CARET  &kp MINUS
  &kp TILDE      &kp EXCLAMATION  &kp AT_SIGN   &kp HASH              &kp PIPE    &none  &kp EXCL   &kp AT     &kp HASH   &kp UNDER
                                  &none         &trans                &none       &none  &kp EQUAL  &none
            >;
        };

        Functions {
            bindings = <
  &trans  &kp F7  &kp F8  &kp F9  &kp F12    &trans  &trans  &trans  &trans  &trans
  &trans  &kp F4  &kp F5  &kp F6  &kp F11    &trans  &trans  &trans  &trans  &trans
  &trans  &kp F1  &kp F2  &kp F3  &kp F10    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans     &trans  &trans  &trans
            >;
        };

        Navigation {
            bindings = <
  &none     &none      &none      &none      &none    &kp INSERT  &msc SCRL_LEFT  &msc SCRL_DOWN  &msc SCRL_UP  &msc SCRL_RIGHT
  &kp LEFT  &kp UP     &kp DOWN   &kp RIGHT  &none    &caps_word  &kp LEFT        &kp DOWN_ARROW  &kp UP_ARROW  &kp RIGHT
  &kp HOME  &kp PG_UP  &kp PG_DN  &kp END    &none    &none       &kp HOME        &kp PAGE_DOWN   &kp PAGE_UP   &kp END
                       &trans     &none      &none    &none       &none           &none
            >;
        };

        Mouse {
            bindings = <
  &none   &none    &none     &none     &none       &none     &none     &none  &none  &none
  &none   &vs_def  &vs_impl  &vs_refs  &none       &none     &none     &none  &none  &none
  &trans  &mo 6    &mo 7     &none     &none       &none     &none     &none  &none  &trans
                   &mkp MB2  &mkp MB1  &mkp MB3    &mkp MB4  &mkp MB5  &none
            >;
        };

        Snipe {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &none
            >;
        };

        Drag {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans  &none
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
