#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

// #include "macros.dtsi"
// #include "behaviors.dtsi"
// #include "combos.dtsi"

&lt {
    hold-trigger-on-release;
    hold-while-undecided;
    hold-while-undecided-linger;
};

/ {
    /* input config for mouse move mode */

    trackball_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <0 2 7>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <4>;
        scale-divisor = <5>;

        // bindings = <&ib_toggle_layer 7>;
    };

    /* input config for snipe mode */

    trackball_snipe_listener {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <3>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_X>;
        y-input-code = <INPUT_REL_Y>;
        scale-multiplier = <1>;
        scale-divisor = <6>;
    };

    /* input config for mouse scroll mode */

    trackball_scroll_listener_vert {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        y-input-code = <INPUT_REL_WHEEL>;  // vertical scroll
        y-invert;
        bindings = <&ib_wheel_scaler 1 24>;  // vertical scroll speed
    };

    trackball_scroll_listener_horiz {
        compatible = "zmk,input-behavior-listener";
        device = <&vtrackball>;
        layers = <1>;
        evt-type = <INPUT_EV_REL>;
        x-input-code = <INPUT_REL_HWHEEL>;  // horizontal scroll
        bindings = <&ib_wheel_scaler 1 8>;  // horizontal scroll speed
    };

    /* define a resolution down scaler only for INPUT_REL_WHEEL */

    ib_wheel_scaler: ib_wheel_scaler {
        compatible = "zmk,input-behavior-scaler";
        #binding-cells = <2>;
        evt-type = <INPUT_EV_REL>;
        input-code = <INPUT_REL_WHEEL>;
    };

    /* adjust cooldown waiting period for mouse key layer after activated */

    ib_toggle_layer: ib_toggle_layer {
        compatible = "zmk,input-behavior-tog-layer";
        #binding-cells = <1>;
        time-to-live-ms = <750>;
    };

    behaviors {
        hl: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
            hold-trigger-on-release;
        };

        hr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            hold-while-undecided;
            hold-while-undecided-linger;
            hold-trigger-on-release;
        };
    };

    macros {
        vs_def: vs_def {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp F12>;
            label = "VS_DEF";
        };

        vs_impl: vs_impl {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(F12)>;
            label = "VS_IMPL";
        };

        vs_refs: vs_refs {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&mkp LCLK &kp LC(K) &kp R>;
            label = "VS_REFS";
        };
    };

    // ╭──────┬──────┬──────┬──────┬──────┬──────╮  ╭──────┬──────┬──────┬──────┬──────┬──────╮
    //    00     01     02     03    04      05        06     07     08     09     10     11
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    12     13     14     15    16      17        18     19     20     21     22     23
    // ├──────┼──────┼──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┼──────┼──────┼──────┤
    //    24     25     26     27    28      29        30     31     32     33     34     35
    // ╰──────┴──────┴──────┼──────┼──────┼──────┤  ├──────┼──────┼──────┴──────┴──────┴──────╯
    //                         36     37     38        39     40
    //                      ╰──────┴──────┴──────╯  ╰──────┴──────╯

    #define BASE    0
    #define NAVI     1
    #define NUM_SYM     2
    #define MOUSE    3
    #define FUNC  4

    combos {
        compatible = "zmk,combos";

        combo_capsword {
            bindings = <&caps_word>;
            key-positions = <2 7>;
        };

        combo_capslock {
            bindings = <&kp CAPSLOCK>;
            key-positions = <1 8>;
        };

        combo_lang {
            bindings = <&kp LG(SPACE)>;
            key-positions = <13 12>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        BASE {
            bindings = <
  &kp SQT  &kp D  &kp U      &kp P     &kp W    &kp J       &kp K  &kp Y      &kp R    &kp SEMI
  &none    &none  &none      &none     &kp G    &kp H       &none  &none      &none    &none
  &none    &kp X  &kp C      &kp V     &kp B    &kp F       &kp M  &kp COMMA  &kp DOT  &kp Q
                  &lt 4 ESC  &mkp MB1  &none    &kp RSHIFT  &mo 1
            >;
        };

        Numbers {
            bindings = <
  &none              &kp N7  &kp N8        &kp N9  &kp PRCNT    &kp LS(NUMBER_6)   &kp LS(N7)     &kp LS(N8)        &kp LS(N9)     &kp LS(N0)
  &kp LS(BACKSLASH)  &kp N4  &kp N5        &kp N6  &kp N0       &kp EQUAL          &none          &none             &none          &none
  &kp COMMA          &kp N1  &kp N2        &kp N3  &none        &kp RIGHT_BRACKET  &kp RA(MINUS)  &kp RA(NUMBER_2)  &kp LS(SLASH)  &none
                             &lt 2 PERIOD  &none   &kp ENTER    &none              &none
            >;
        };

        Symbols {
            bindings = <
  &none     &none     &kp C_PP   &none      &none    &none       &kp F1  &kp F2   &kp F3   &kp F4
  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none    &kp CAPS    &kp F5  &kp F6   &kp F7   &kp F8
  &none     &none     &none      &none      &none    &kp KP_NUM  &kp F9  &kp F10  &kp F11  &kp F12
                      &none      &none      &none    &none       &none
            >;
        };

        Navigation {
            bindings = <
  &none     &none     &none      &none      &none    &none      &kp HOME        &kp UP    &kp END    &kp PG_UP
  &kp LALT  &kp LGUI  &kp LCTRL  &kp LSHFT  &none    &kp TAB    &kp LEFT_ARROW  &kp DOWN  &kp RIGHT  &kp PG_DN
  &none     &none     &none      &none      &none    &kp ENTER  &kp BSPC        &kp DEL   &kp K_APP  &none
                      &none      &none      &none    &none      &mo 2
            >;
        };

        Mouse {
            bindings = <
  &none  &mkp MB4  &none     &mkp MB5  &none    &none  &none  &none  &none  &none
  &none  &none     &mkp MB3  &none     &none    &none  &none  &none  &none  &none
  &none  &mkp MB2  &none     &mkp MB1  &none    &none  &none  &none  &none  &none
                   &none     &none     &none    &none  &none
            >;
        };

        Snipe {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };

        Drag {
            bindings = <
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans
                  &trans  &trans  &trans    &trans  &trans
            >;
        };
    };

    conditional_layers { compatible = "zmk,conditional-layers"; };
};
